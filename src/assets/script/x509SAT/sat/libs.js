
var PrivateKey,
typeObject,
certX509;
var api;
var _0x49c1 = [
  'replace',
  'txt',
  'btn',
  'Abriendo ventana para seleccionar: ',
  'file',
  'files',
  'Archivo seleccionado: ',
  'name',
  'onload',
  'base64,',
  'Certificate',
  'Llave privada',
  'readAsDataURL',
  'location',
  'href',
  'urlApplet',
  'value',
  'readCertPEM',
  '#fert',
  'val',
  'FIEL',
  'getRFC',
  'rfc',
  'Certificado Invalido: Debe usar un certificado de E.FIRMA',
  'El Certificado seleccionado es inv�lido',
  'getNumSerie',
  'SIN_FIRMA',
  'Error: ',
  'encode',
  'El certificado no corresponde con la llave privada.',
  'malformed plain PKCS8 private key(code:001)',
  'Certificado, clave privada o contrase�a de clave privada inv�lidos, int�ntelo nuevamente.',
  'Certificado, Clave privada o contrase�a de Clave privada inv�lidos, int�ntelo nuevamente.',
  'privateKeyPassword',
  'Certificado Length: ',
  'length',
  'Key Length: ',
  'Contrasena de la Llave Privada: ',
  'Contrasena Llave Privada: ',
  'La Llave privada es requerida.\n ',
  'cargaCert',
  '#msgErrorRfc',
  'hide',
  '#msgErrorKey',
  '#msgErrorCert',
  '#msgErrorCap',
  '#rfc',
  'css',
  '#ccc',
  '#privateKeyPassword',
  '#txtCertificate',
  '#jcaptchainput',
  '#txtPrivateKey',
  '#D0021B',
  'show',
  '#msgErrorPass',
  '2a864886f70d010101',
  'algoid',
  'key',
  'setPrivateEx',
  '2a8648ce3d0201',
  'parsePrivateRawECKeyHexAtObj',
  'OID',
  'oidhex2name',
  'KJUR.crypto.OID.oidhex2name undefined: ',
  'algparam',
  'crypto',
  'ECDSA',
  'setPublicKeyHex',
  'pubkey',
  'setPrivateKeyHex',
  'isPublic',
  'getVbyList',
  'DSA',
  'setPrivate',
  'unsupported private key algorithm',
  'substr',
  'getPosArrayOfChildren_AtObj',
  'malformed plain PKCS8 private key(code:002)',
  'malformed PKCS8 private key(code:003)',
  'malformed PKCS8 private key(code:004)',
  'getHexOfV_AtObj',
  'keyidx',
  'getStartPosOfV_AtObj',
  'malformed RSA private key(code:001)',
  'malformed RSA private key(code:002)',
  'malformed format: SEQUENCE(0).items != 2: ',
  'malformed format: SEQUENCE(0.0).items != 2: ',
  '2A864886F70D01050D',
  'this only supports pkcs5PBES2',
  'malformed format: SEQUENCE(0.0.1).items != 2: ',
  'malformed format: SEQUENCE(0.0.1.0).items != 2: ',
  'encryptionSchemeAlg',
  'TripleDES',
  '2B0E030207',
  'DES',
  '608648016503040116',
  'AES-192',
  '608648016503040102',
  'AES-128',
  '60864801650304012A',
  'AES-256',
  '2A864886F70D0302',
  'RC2',
  'encryptionSchemeIV',
  '2A864886F70D01050C',
  'this only supports pkcs5PBKDF2',
  'malformed format: SEQUENCE(0.0.1.0.1).items < 2: ',
  'pbkdf2Salt',
  'pbkdf2Iter',
  'malformed format pbkdf2Iter: ',
  'tamLlave',
  'malformed format tamLlave: ',
  'Hex',
  'parse',
  'misc',
  'hmac',
  'hash',
  'sha1',
  'encrypt',
  'codec',
  'toBits',
  'pbkdf2',
  'Algoritmo no soportado',
  'hex',
  'fromBits',
  'ciphertext',
  'enc',
  'decrypt',
  'effectiveKey',
  'stringify',
  'unarmor',
  'decode',
  'toHexString',
  'signString',
  'subjectPublicKeyRSA',
  'apply',
  'return (function() ',
  '{}.constructor("return this")( )',
  'console',
  'log',
  'warn',
  'info',
  'error',
  'exception',
  'debug',
  'trace',
  'Revisando el el soporte del API',
  'File',
  'FileReader',
  'Su Navegador no esta soportado.',
  '#formEfirma',
  'remove',
  'El API esta soportada',
  'Agregando Listeners',
  'getElementById',
  'txtCertificate',
  'click',
  'btnCertificate',
  'addEventListener',
  'fileCertificate',
  'change',
  'txtPrivateKey',
  'btnPrivateKey',
  'filePrivateKey',
  'target'
];
(function (_0x4b5f68, _0x5e785c) {
  var _0x4fadd = function (_0x583220) {
    while (--_0x583220) {
      _0x4b5f68['push'](_0x4b5f68['shift']());
    }
  };
  _0x4fadd(++_0x5e785c);
}(_0x49c1, 302));
var _0x149c = function (_0x577cfa, _0x9aaf24) {
  _0x577cfa = _0x577cfa - 0;
  var _0x4b5157 = _0x49c1[_0x577cfa];
  return _0x4b5157;
};
var _0x52a1c3 = function () {
  var _0x33334e = !![];
  return function (_0x59c6af, _0xd436f8) {
    var _0x50886c = _0x33334e ? function () {
      if (_0xd436f8) {
        var _0x53c161 = _0xd436f8[_0x149c('0x0')](_0x59c6af, arguments);
        _0xd436f8 = null;
        return _0x53c161;
      }
    }
     : function () {
    };
    _0x33334e = ![];
    return _0x50886c;
  };
}();
var _0x4da5e7 = _0x52a1c3(this, function () {
  var _0x6a5066 = Function(_0x149c('0x1') + _0x149c('0x2') + ');');
  var _0x212408 = function () {
  };
  var _0x4c354d = _0x6a5066();
  if (!_0x4c354d[_0x149c('0x3')]) {
    _0x4c354d['console'] = function (_0x276041) {
      var _0x47240e = {
      };
      _0x47240e[_0x149c('0x4')] = _0x276041;
      _0x47240e[_0x149c('0x5')] = _0x276041;
      _0x47240e['debug'] = _0x276041;
      _0x47240e[_0x149c('0x6')] = _0x276041;
      _0x47240e[_0x149c('0x7')] = _0x276041;
      _0x47240e[_0x149c('0x8')] = _0x276041;
      _0x47240e['trace'] = _0x276041;
      return _0x47240e;
    }(_0x212408);
  } else {
    _0x4c354d[_0x149c('0x3')][_0x149c('0x4')] = _0x212408;
    _0x4c354d[_0x149c('0x3')][_0x149c('0x5')] = _0x212408;
    _0x4c354d[_0x149c('0x3')][_0x149c('0x9')] = _0x212408;
    _0x4c354d[_0x149c('0x3')]['info'] = _0x212408;
    _0x4c354d[_0x149c('0x3')][_0x149c('0x7')] = _0x212408;
    _0x4c354d[_0x149c('0x3')][_0x149c('0x8')] = _0x212408;
    _0x4c354d['console'][_0x149c('0xa')] = _0x212408;
  }
});
_0x4da5e7();

api = function() {
    if (console['log'](_0x149c('0xb')), !window[_0x149c('0xc')] || !window[_0x149c('0xd')]) return console[_0x149c('0x4')](_0x149c('0xe')),
        despliega('Tu versi�n de navegador no esta soportada, utilizar una mas actual.'),
        void $(_0x149c('0xf'))[_0x149c('0x10')]();
    console['log'](_0x149c('0x11')),
        console[_0x149c('0x4')](_0x149c('0x12')),
        document[_0x149c('0x13')](_0x149c('0x14'))['addEventListener'](_0x149c('0x15'), openFileDialog),
        document[_0x149c('0x13')](_0x149c('0x16'))[_0x149c('0x17')](_0x149c('0x15'), openFileDialog),
        document[_0x149c('0x13')](_0x149c('0x18'))[_0x149c('0x17')](_0x149c('0x19'), changeFile),
        document[_0x149c('0x13')](_0x149c('0x1a'))[_0x149c('0x17')](_0x149c('0x15'), openFileDialog),
        document['getElementById'](_0x149c('0x1b'))[_0x149c('0x17')](_0x149c('0x15'), openFileDialog),
        document[_0x149c('0x13')](_0x149c('0x1c'))[_0x149c('0x17')]('change', changeFile);
    document.getElementById('fileCertificate').addEventListener('change', handleFileSelect, false);
}

function checkAPISupport() {
  if (console['log'](_0x149c('0xb')), !window[_0x149c('0xc')] || !window[_0x149c('0xd')]) return console[_0x149c('0x4')](_0x149c('0xe')),
  despliega('Tu versi�n de navegador no esta soportada, utilizar una mas actual.'),
  void $(_0x149c('0xf')) [_0x149c('0x10')]();
  console['log'](_0x149c('0x11')),
  console[_0x149c('0x4')](_0x149c('0x12')),
  document[_0x149c('0x13')](_0x149c('0x14')) ['addEventListener'](_0x149c('0x15'), openFileDialog),
  document[_0x149c('0x13')](_0x149c('0x16')) [_0x149c('0x17')](_0x149c('0x15'), openFileDialog),
  document[_0x149c('0x13')](_0x149c('0x18')) [_0x149c('0x17')](_0x149c('0x19'), changeFile),
  document[_0x149c('0x13')](_0x149c('0x1a')) [_0x149c('0x17')](_0x149c('0x15'), openFileDialog),
  document['getElementById'](_0x149c('0x1b')) [_0x149c('0x17')](_0x149c('0x15'), openFileDialog),
  document[_0x149c('0x13')](_0x149c('0x1c')) [_0x149c('0x17')]('change', changeFile);
}
function openFileDialog(_0x478c43) {
  typeObject = _0x478c43[_0x149c('0x1d')]['id'][_0x149c('0x1e')](_0x149c('0x1f'), '') [_0x149c('0x1e')](_0x149c('0x20'), ''),
  console[_0x149c('0x4')](_0x149c('0x21') + typeObject),
  document[_0x149c('0x13')](_0x149c('0x22') + typeObject) [_0x149c('0x15')]();
}
function changeFile(_0x90f5a0) {
  var _0x40e0df = _0x90f5a0['target'][_0x149c('0x23')][0];
  console['log'](_0x149c('0x24') + _0x40e0df[_0x149c('0x25')]),
  document[_0x149c('0x13')](_0x90f5a0['target']['id'][_0x149c('0x1e')](_0x149c('0x22'), _0x149c('0x1f'))) ['value'] = _0x40e0df[_0x149c('0x25')];
  var _0x20cbe4 = new FileReader();
  _0x20cbe4[_0x149c('0x26')] = function (_0x16d9d7) {
    return function (_0x52c01d) {
      window[_0x16d9d7] = _0x52c01d['target']['result']['split'](_0x149c('0x27')) [1],
      _0x149c('0x28') === _0x16d9d7 ? cargaCert()  : console[_0x149c('0x4')](_0x149c('0x29'));
    };
  }(_0x90f5a0[_0x149c('0x1d')]['id'][_0x149c('0x1e')](_0x149c('0x22'), '')),
  _0x20cbe4[_0x149c('0x2a')](_0x40e0df);
}
function versionExplorador() {
  document[_0x149c('0x2b')][_0x149c('0x2c')] = document[_0x149c('0x13')](_0x149c('0x2d')) [_0x149c('0x2e')];
}
function cargaCert() {
  try {
    certX509 = new X509(),
    certX509[_0x149c('0x2f')](Certificate),
    $(_0x149c('0x30')) [_0x149c('0x31')](certX509['getNotAfter']());
    if (_0x149c('0x32') === certX509['tipoCertificado']()) {
      var _0x92deb8 = certX509[_0x149c('0x33')]();
      return void (document[_0x149c('0x13')](_0x149c('0x34')) ['value'] = _0x92deb8);
    }
    despliega(_0x149c('0x35'));
  } catch (_0x2c6b95) {
    despliega(_0x149c('0x36'));
  }
}
function obtieneNumSerie() {
  var _0x1907d2 = 'SIN_NUMERO',
  _0x1c5a9b = validaRequeridos();
  return console[_0x149c('0x4')]('Error: ' + _0x1c5a9b),
  '' == _0x1c5a9b && Certificate && (_0x1907d2 = certX509[_0x149c('0x37')]()),
  _0x1907d2;
}
function generaFirma(_0xe0cd3e, _0xa4bd30,sha256data) {
  var _0x319737 = _0x149c('0x38'),
  _0x193094 = validaRequeridos();
  if (console[_0x149c('0x4')](_0x149c('0x39') + _0x193094), '' == _0x193094) if (Certificate && PrivateKey && _0xe0cd3e) {
    certX509[_0x149c('0x33')](),
    certX509[_0x149c('0x37')]();
      try {

          if (sha256data) {

              var _0x4927fb = cargaLlave(PrivateKey, _0xe0cd3e);
              if (correspondencia(certX509, _0x4927fb)) {
                  var _0x15501a = firma(_0x4927fb, _0xa4bd30, sha256data);
                  return _0x319737 = Base64[_0x149c('0x3a')](_0x15501a);
              }
          }
          else {
                 var _0x4927fb = cargaLlave(PrivateKey, _0xe0cd3e);
              if (correspondencia(certX509, _0x4927fb)) {
                  var _0x15501a = firma(_0x4927fb, _0xa4bd30);
                  return _0x319737 = Base64[_0x149c('0x3a')](_0x15501a);
              }
      }
      despliega(_0x149c('0x3b'));
    } catch (_0x2ed25d) {
      //console[_0x149c('0x4')](_0x2ed25d),
      //_0x149c('0x3c') === _0x2ed25d ? despliega(_0x149c('0x3d')) : despliega('La clave privada que seleccion� es incorrecta.');
         
    }
  } else despliega(_0x149c('0x3e'));
   else despliega(_0x193094);
  return _0x319737;
}
function validaRequeridos() {
  var _0x2853a9 = document[_0x149c('0x13')](_0x149c('0x14')) [_0x149c('0x2e')],
  _0xdcb8fa = document[_0x149c('0x13')](_0x149c('0x1a')) [_0x149c('0x2e')],
  _0xf51afd = document[_0x149c('0x13')](_0x149c('0x3f')) [_0x149c('0x2e')],
  _0x56763e = '';
  return console[_0x149c('0x4')]('Certificado: ' + _0x2853a9),
  console[_0x149c('0x4')](_0x149c('0x40') + _0x2853a9[_0x149c('0x41')]),
  console[_0x149c('0x4')]('Clave Privada: ' + _0xdcb8fa),
  console[_0x149c('0x4')](_0x149c('0x42') + _0xdcb8fa['length']),
  console[_0x149c('0x4')](_0x149c('0x43') + _0xf51afd),
  console[_0x149c('0x4')](_0x149c('0x44') + _0xf51afd['length']),
  null != _0x2853a9 && 0 != _0x2853a9[_0x149c('0x41')] || (_0x56763e = 'El Certificado es requerido. \n'),
  null != _0xdcb8fa && 0 != _0xdcb8fa['length'] || (_0x56763e += _0x149c('0x45')),
  null != _0xf51afd && 0 != _0xf51afd['length'] || (_0x56763e += 'La contrase&ntilde;a de la Llave Privada es requerida.'),
  this[_0x149c('0x46')](),
  console['log'](_0x149c('0x39') + _0x56763e),
  _0x56763e;
}
function validate() {
  $(_0x149c('0x47')) [_0x149c('0x48')](),
  $('#msgErrorPass') [_0x149c('0x48')](),
  $(_0x149c('0x49')) [_0x149c('0x48')](),
  $(_0x149c('0x4a')) [_0x149c('0x48')](),
  $(_0x149c('0x4b')) [_0x149c('0x48')](),
  $(_0x149c('0x4c')) [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x4e')
  }),
  $(_0x149c('0x4f')) [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x4e')
  }),
  $('#txtPrivateKey') [_0x149c('0x4d')]({
    'borderColor': '#ccc'
  }),
  $(_0x149c('0x50')) [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x4e')
  }),
  $(_0x149c('0x51')) [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x4e')
  });
  var _0xe115b6 = !0,
  _0x555c78 = $(_0x149c('0x4c')) [_0x149c('0x31')](),
  _0x44c737 = $(_0x149c('0x4f')) [_0x149c('0x31')](),
  _0x71a046 = $(_0x149c('0x52')) [_0x149c('0x31')](),
  _0x5ce98d = $(_0x149c('0x50')) [_0x149c('0x31')]();
  $(_0x149c('0x51')) [_0x149c('0x31')]();
  return '' == _0x555c78 && ($(_0x149c('0x4c')) [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x53')
  }), $('#msgErrorRfc') [_0x149c('0x54')](), _0xe115b6 = !1),
  '' == _0x44c737 && ($('#privateKeyPassword') [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x53')
  }), $(_0x149c('0x55')) [_0x149c('0x54')](), _0xe115b6 = !1),
  '' == _0x71a046 && ($(_0x149c('0x52')) [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x53')
  }), $(_0x149c('0x49')) [_0x149c('0x54')](), _0xe115b6 = !1),
  '' == _0x5ce98d && ($('#txtCertificate') [_0x149c('0x4d')]({
    'borderColor': _0x149c('0x53')
  }), $(_0x149c('0x4a')) [_0x149c('0x54')](), _0xe115b6 = !1),
  _0xe115b6;
}
function getKeyFromPlainPrivatePKCS8Hex(_0x19ead8) {
  var _0x59a503 = parsePlainPrivatePKCS8Hex(_0x19ead8);
  if (_0x149c('0x56') == _0x59a503[_0x149c('0x57')]) {
    parsePrivateRawRSAKeyHexAtObj(_0x19ead8, _0x59a503);
    var _0x46e927 = _0x59a503[_0x149c('0x58')],
    _0x4dd98b = new RSAKey();
    return _0x4dd98b[_0x149c('0x59')](_0x46e927['n'], _0x46e927['e'], _0x46e927['d'], _0x46e927['p'], _0x46e927['q'], _0x46e927['dp'], _0x46e927['dq'], _0x46e927['co']),
    _0x4dd98b;
  }
  if (_0x149c('0x5a') == _0x59a503[_0x149c('0x57')]) {
    if (this[_0x149c('0x5b')](_0x19ead8, _0x59a503), void 0 === KJUR['crypto'][_0x149c('0x5c')][_0x149c('0x5d')][_0x59a503['algparam']]) throw _0x149c('0x5e') + _0x59a503[_0x149c('0x5f')];
    var _0x560540 = KJUR[_0x149c('0x60')][_0x149c('0x5c')][_0x149c('0x5d')][_0x59a503[_0x149c('0x5f')]],
    _0x4dd98b = new KJUR[_0x149c('0x60')][_0x149c('0x61')]({
      'curve': _0x560540
    });
    return _0x4dd98b[_0x149c('0x62')](_0x59a503[_0x149c('0x63')]),
    _0x4dd98b[_0x149c('0x64')](_0x59a503[_0x149c('0x58')]),
    _0x4dd98b[_0x149c('0x65')] = !1,
    _0x4dd98b;
  }
  if ('2a8648ce380401' == _0x59a503['algoid']) {
    var _0x19aecb = ASN1HEX['getVbyList'](_0x19ead8, 0, [
      1,
      1,
      0
    ], '02'),
    _0x2e65ca = ASN1HEX[_0x149c('0x66')](_0x19ead8, 0, [
      1,
      1,
      1
    ], '02'),
    _0xab9948 = ASN1HEX[_0x149c('0x66')](_0x19ead8, 0, [
      1,
      1,
      2
    ], '02'),
    _0x53f7f2 = ASN1HEX[_0x149c('0x66')](_0x19ead8, 0, [
      2,
      0
    ], '02'),
    _0x2be21c = new BigInteger(_0x19aecb, 16),
    _0x3d55a2 = new BigInteger(_0x2e65ca, 16),
    _0x4c4548 = new BigInteger(_0xab9948, 16),
    _0x531c1d = new BigInteger(_0x53f7f2, 16),
    _0x4dd98b = new KJUR[_0x149c('0x60')][_0x149c('0x67')]();
    return _0x4dd98b[_0x149c('0x68')](_0x2be21c, _0x3d55a2, _0x4c4548, null, _0x531c1d),
    _0x4dd98b;
  }
  throw _0x149c('0x69');
}
function parsePlainPrivatePKCS8Hex(_0x112f1a) {
  var _0x226fcd = {
  };
  if (_0x226fcd[_0x149c('0x5f')] = null, '30' != _0x112f1a[_0x149c('0x6a')](0, 2)) throw 'malformed plain PKCS8 private key(code:001)';
  // if (_0x226fcd[_0x149c('0x5f')] = null, '\x33\x30' != _0x112f1a[_0x149c('0x6a')](0x0, 0x2)) throw '\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x70\x6c\x61\x69\x6e\x20\x50\x4b\x43\x53\x38\x20\x70\x72\x69\x76\x61\x74\x65\x20\x6b\x65\x79\x28\x63\x6f\x64\x65\x3a\x30\x30\x31\x29';
  var _0x442785 = ASN1HEX[_0x149c('0x6b')](_0x112f1a, 0);
  if (3 != _0x442785['length']) throw _0x149c('0x6c');
  if ('30' != _0x112f1a[_0x149c('0x6a')](_0x442785[1], 2)) throw _0x149c('0x6d');
  var _0x2af4d0 = ASN1HEX[_0x149c('0x6b')](_0x112f1a, _0x442785[1]);
  if (2 != _0x2af4d0[_0x149c('0x41')])
  throw _0x149c('0x6e');
  if ('06' != _0x112f1a[_0x149c('0x6a')](_0x2af4d0[0], 2)) throw 'malformed PKCS8 private key(code:005)';
  if (_0x226fcd[_0x149c('0x57')] = ASN1HEX[_0x149c('0x6f')](_0x112f1a, _0x2af4d0[0]), '06' == _0x112f1a[_0x149c('0x6a')](_0x2af4d0[1], 2) && (_0x226fcd['algparam'] = ASN1HEX[_0x149c('0x6f')](_0x112f1a, _0x2af4d0[1])), '04' != _0x112f1a[_0x149c('0x6a')](_0x442785[2], 2)) throw 'malformed PKCS8 private key(code:006)';
  return _0x226fcd[_0x149c('0x70')] = ASN1HEX[_0x149c('0x71')](_0x112f1a, _0x442785[2]),
  _0x226fcd;
}
function parsePrivateRawRSAKeyHexAtObj(_0x377ba8, _0x3cc708) {
  var _0x4d1bae = _0x3cc708['keyidx'];
  if ('30' != _0x377ba8[_0x149c('0x6a')](_0x4d1bae, 2)) throw _0x149c('0x72');
  var _0x3d8cb4 = ASN1HEX['getPosArrayOfChildren_AtObj'](_0x377ba8, _0x4d1bae);
  if (9 != _0x3d8cb4[_0x149c('0x41')]) throw _0x149c('0x73');
  _0x3cc708[_0x149c('0x58')] = {
  },
  _0x3cc708[_0x149c('0x58')]['n'] = ASN1HEX[_0x149c('0x6f')](_0x377ba8, _0x3d8cb4[1]),
  _0x3cc708[_0x149c('0x58')]['e'] = ASN1HEX['getHexOfV_AtObj'](_0x377ba8, _0x3d8cb4[2]),
  _0x3cc708['key']['d'] = ASN1HEX[_0x149c('0x6f')](_0x377ba8, _0x3d8cb4[3]),
  _0x3cc708[_0x149c('0x58')]['p'] = ASN1HEX['getHexOfV_AtObj'](_0x377ba8, _0x3d8cb4[4]),
  _0x3cc708[_0x149c('0x58')]['q'] = ASN1HEX['getHexOfV_AtObj'](_0x377ba8, _0x3d8cb4[5]),
  _0x3cc708[_0x149c('0x58')]['dp'] = ASN1HEX[_0x149c('0x6f')](_0x377ba8, _0x3d8cb4[6]),
  _0x3cc708[_0x149c('0x58')]['dq'] = ASN1HEX['getHexOfV_AtObj'](_0x377ba8, _0x3d8cb4[7]),
  _0x3cc708['key']['co'] = ASN1HEX[_0x149c('0x6f')](_0x377ba8, _0x3d8cb4[8]);
}
function parsePrivateRawECKeyHexAtObj(_0x4a0b31, _0x3ff2a1) {
  var _0x53d8fe = _0x3ff2a1['keyidx'],
  _0x3d5e36 = ASN1HEX[_0x149c('0x66')](_0x4a0b31, _0x53d8fe, [
    1
  ], '04'),
  _0x7e57e2 = ASN1HEX[_0x149c('0x66')](_0x4a0b31, _0x53d8fe, [
    2,
    0
  ], '03') ['substr'](2);
  _0x3ff2a1[_0x149c('0x58')] = _0x3d5e36,
  _0x3ff2a1[_0x149c('0x63')] = _0x7e57e2;
}


function obtieneInfoPKCS8(_0x4e43da) {
  var _0x4c7645 = {
  },
  _0x8589b9 = ASN1HEX[_0x149c('0x6b')](_0x4e43da, 0);
  if (2 != _0x8589b9['length']) throw _0x149c('0x74') + _0x8589b9[_0x149c('0x41')];
  _0x4c7645['ciphertext'] = ASN1HEX['getHexOfV_AtObj'](_0x4e43da, _0x8589b9[1]);
  var _0x33af08 = ASN1HEX[_0x149c('0x6b')](_0x4e43da, _0x8589b9[0]);
  if (2 != _0x33af08[_0x149c('0x41')]) throw _0x149c('0x75') + _0x33af08[_0x149c('0x41')];
  ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x33af08[0]);
  if (_0x149c('0x76') != ASN1HEX['getHexOfV_AtObj'](_0x4e43da, _0x33af08[0])) throw _0x149c('0x77');
  var _0xd8c11c = ASN1HEX[_0x149c('0x6b')](_0x4e43da, _0x33af08[1]);
  if (2 != _0x33af08[_0x149c('0x41')]) throw _0x149c('0x78') + _0xd8c11c[_0x149c('0x41')];
  var _0x31dabb = ASN1HEX[_0x149c('0x6b')](_0x4e43da, _0xd8c11c[0]);
  if (2 != _0x31dabb['length']) throw _0x149c('0x79') + _0x31dabb[_0x149c('0x41')];
  var _0x800840 = ASN1HEX[_0x149c('0x6b')](_0x4e43da, _0xd8c11c[1]);
  if (2 != _0x800840[_0x149c('0x41')]) throw 'malformed format: SEQUENCE(0.0.1.1).items != 2: ' + _0x800840[_0x149c('0x41')];
  var _0x14be16 = ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x800840[0]);
  if ('2A864886F70D0307' === _0x14be16 || '3ECE45092C62A8B9' === _0x14be16) _0x4c7645[_0x149c('0x7a')] = _0x149c('0x7b');
   else if (_0x149c('0x7c') === _0x14be16) _0x4c7645[_0x149c('0x7a')] = _0x149c('0x7d');
   else if (_0x149c('0x7e') === _0x14be16) _0x4c7645[_0x149c('0x7a')] = _0x149c('0x7f');
   else if (_0x149c('0x80') === _0x14be16) _0x4c7645[_0x149c('0x7a')] = _0x149c('0x81');
   else if (_0x149c('0x82') === _0x14be16) _0x4c7645[_0x149c('0x7a')] = _0x149c('0x83');
   else {
    if (_0x149c('0x84') !== _0x14be16) throw 'Algortimo no soportado ' + _0x14be16;
    _0x4c7645[_0x149c('0x7a')] = _0x149c('0x85');
  }
  if (_0x149c('0x85') !== _0x4c7645['encryptionSchemeAlg']) _0x4c7645['encryptionSchemeIV'] = ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x800840[1]);
   else {
    var _0x5b5af2 = ASN1HEX[_0x149c('0x6b')](_0x4e43da, _0x800840[1]);
    _0x4c7645['effectiveKey'] = ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x5b5af2[0]),
    _0x4c7645[_0x149c('0x86')] = ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x5b5af2[1]);
  }
  ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x31dabb[0]);
  if (_0x149c('0x87') != ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x31dabb[0])) throw _0x149c('0x88');
  var _0x5ecc48 = ASN1HEX[_0x149c('0x6b')](_0x4e43da, _0x31dabb[1]);
  if (_0x5ecc48[_0x149c('0x41')] < 2) throw _0x149c('0x89') + _0x5ecc48['length'];
  _0x4c7645[_0x149c('0x8a')] = ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x5ecc48[0]);
  var _0x263f26 = ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x5ecc48[1]);
  try {
    _0x4c7645[_0x149c('0x8b')] = parseInt(_0x263f26, 16);
  } catch (_0x22d393) {
    throw _0x149c('0x8c') + _0x263f26;
  }
  if ('RC2' === _0x4c7645['encryptionSchemeAlg']) {
    var _0x1a1ddc = ASN1HEX[_0x149c('0x6f')](_0x4e43da, _0x5ecc48[2]);
    try {
      _0x4c7645[_0x149c('0x8d')] = parseInt(_0x1a1ddc, 16);
    } catch (_0x31058d) {
      throw _0x149c('0x8e') + _0x1a1ddc;
    }
  }
  return _0x4c7645;
}



function obtenLlaveDerivada(_0x8039f, _0x3a875b) {
  var _0x13b420,
  _0x498b0c = (CryptoJS['enc'][_0x149c('0x8f')][_0x149c('0x90')](_0x8039f[_0x149c('0x8a')]), _0x8039f[_0x149c('0x8b')]),
  _0x38d71c = function (_0x41a800) {
    var _0x3a875b = new sjcl[_0x149c('0x91')][_0x149c('0x92')](_0x41a800, sjcl[_0x149c('0x93')][_0x149c('0x94')]);
    this[_0x149c('0x95')] = function () {
      return _0x3a875b[_0x149c('0x95')][_0x149c('0x0')](_0x3a875b, arguments);
    };
  },
  _0x384fb8 = sjcl[_0x149c('0x96')]['hex'][_0x149c('0x97')](_0x8039f['pbkdf2Salt']);
  if (_0x149c('0x7d') == _0x8039f['encryptionSchemeAlg'] || _0x149c('0x7b') == _0x8039f[_0x149c('0x7a')]) _0x13b420 = sjcl[_0x149c('0x91')][_0x149c('0x98')](_0x3a875b, _0x384fb8, _0x498b0c, 192, _0x38d71c);
   else if (_0x149c('0x83') == _0x8039f['encryptionSchemeAlg']) _0x13b420 = sjcl[_0x149c('0x91')][_0x149c('0x98')](_0x3a875b, _0x384fb8, _0x498b0c, 256, _0x38d71c);
   else if (_0x149c('0x81') == _0x8039f[_0x149c('0x7a')]) _0x13b420 = sjcl['misc']['pbkdf2'](_0x3a875b, _0x384fb8, _0x498b0c, 128, _0x38d71c);
   else if (_0x149c('0x7f') == _0x8039f[_0x149c('0x7a')]) _0x13b420 = sjcl[_0x149c('0x91')][_0x149c('0x98')](_0x3a875b, _0x384fb8, _0x498b0c, 192, _0x38d71c);
   else {
    if (_0x149c('0x85') != _0x8039f['encryptionSchemeAlg']) throw _0x149c('0x99');
    _0x13b420 = sjcl[_0x149c('0x91')][_0x149c('0x98')](_0x3a875b, _0x384fb8, _0x498b0c, _0x8039f[_0x149c('0x8d')], _0x38d71c);
  }
  return sjcl[_0x149c('0x96')][_0x149c('0x9a')][_0x149c('0x9b')](_0x13b420);
}
function obtieneLlavePrivada(_0x6e3533, _0x4d9a89) {
  var _0xc212bc,
  _0x58a1a3 = obtieneInfoPKCS8(_0x6e3533),
  _0x514473 = obtenLlaveDerivada(_0x58a1a3, _0x4d9a89),
  _0x1d999f = {
  };
  _0x1d999f[_0x149c('0x9c')] = CryptoJS[_0x149c('0x9d')][_0x149c('0x8f')][_0x149c('0x90')](_0x58a1a3[_0x149c('0x9c')]);
  var _0x218fa0 = CryptoJS['enc'][_0x149c('0x8f')][_0x149c('0x90')](_0x514473),
  _0x2ee214 = CryptoJS['enc'][_0x149c('0x8f')][_0x149c('0x90')](_0x58a1a3[_0x149c('0x86')]);
  if (_0x149c('0x7b') === _0x58a1a3[_0x149c('0x7a')]) _0xc212bc = CryptoJS['TripleDES'][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
    'iv': _0x2ee214
  });
   else if (_0x149c('0x7d') === _0x58a1a3[_0x149c('0x7a')]) _0xc212bc = CryptoJS[_0x149c('0x7d')][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
    'iv': _0x2ee214
  });
   else if (_0x149c('0x81') === _0x58a1a3[_0x149c('0x7a')] || _0x149c('0x7f') === _0x58a1a3['encryptionSchemeAlg'] || _0x149c('0x83') === _0x58a1a3['encryptionSchemeAlg']) _0xc212bc = CryptoJS['AES'][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
    'iv': _0x2ee214
  });
   else if (_0x149c('0x85') === _0x58a1a3[_0x149c('0x7a')]) {
    var _0x8a5849 = CryptoJS[_0x149c('0x9d')]['Hex'][_0x149c('0x90')](_0x58a1a3['effectiveKey']);
    _0xc212bc = CryptoJS[_0x149c('0x85')][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
      'effectiveKeyBits': _0x58a1a3[_0x149c('0x9f')],
      'iv': _0x2ee214
    });
    CryptoJS['enc'][_0x149c('0x8f')][_0x149c('0xa0')](_0xc212bc);
    _0xc212bc = CryptoJS[_0x149c('0x85')][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
      'effectiveKeyBits': _0x8a5849,
      'iv': _0x2ee214
    });
    CryptoJS[_0x149c('0x9d')]['Hex'][_0x149c('0xa0')](_0xc212bc);
    _0xc212bc = CryptoJS[_0x149c('0x85')][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
      'iv': _0x2ee214
    });
    CryptoJS[_0x149c('0x9d')]['Hex'][_0x149c('0xa0')](_0xc212bc);
    _0xc212bc = CryptoJS['RC2']['decrypt'](_0x1d999f, _0x218fa0, {
      'effectiveKeyBits': 40,
      'iv': _0x2ee214
    });
    CryptoJS['enc'][_0x149c('0x8f')][_0x149c('0xa0')](_0xc212bc);
    _0xc212bc = CryptoJS[_0x149c('0x85')]['decrypt'](_0x1d999f, _0x218fa0, {
      'effectiveKeyBits': 160,
      'iv': _0x2ee214
    });
    CryptoJS[_0x149c('0x9d')][_0x149c('0x8f')][_0x149c('0xa0')](_0xc212bc);
    _0xc212bc = CryptoJS['RC2']['decrypt'](_0x1d999f, _0x218fa0, {
      'effectiveKeyBits': 120,
      'iv': _0x2ee214
    });
    CryptoJS['enc'][_0x149c('0x8f')][_0x149c('0xa0')](_0xc212bc);
    _0xc212bc = CryptoJS[_0x149c('0x85')][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
      'effectiveKeyBits': 58,
      'iv': _0x2ee214
    });
    CryptoJS[_0x149c('0x9d')][_0x149c('0x8f')][_0x149c('0xa0')](_0xc212bc);
    _0xc212bc = CryptoJS[_0x149c('0x85')][_0x149c('0x9e')](_0x1d999f, _0x218fa0, {
      'effectiveKeyBits': _0x8a5849
    });
  }
  return CryptoJS[_0x149c('0x9d')][_0x149c('0x8f')][_0x149c('0xa0')](_0xc212bc);
}
function cargaLlave(_0x2d2a96, _0x11742d) {
  var _0x4ac65d = Base64[_0x149c('0xa1')](_0x2d2a96);
  return getKeyFromPlainPrivatePKCS8Hex(obtieneLlavePrivada(ASN1[_0x149c('0xa2')](_0x4ac65d) [_0x149c('0xa3')](), _0x11742d));
}
function firma(_0xa9527b, _0x24e089, sha256Data) {

    if (sha256Data) {
        var _0x2f0214 = _0xa9527b[_0x149c('0xa4')](_0x24e089, _0x149c('0x94'), sha256Data),
            _0x2db5ea = hex2b64(_0x2f0214);
        return console[_0x149c('0x4')]('Firma' + _0x2db5ea),
            _0x2db5ea;
    }
    else {

        var _0x2f0214 = _0xa9527b[_0x149c('0xa4')](_0x24e089, _0x149c('0x94')),
            _0x2db5ea = hex2b64(_0x2f0214);
        return console[_0x149c('0x4')]('Firma' + _0x2db5ea),
            _0x2db5ea;
    }

}
function correspondencia(_0x2a93fd, _0x306889) {
  for (i = 0;
  i < 36;
  i++) if (_0x2a93fd[_0x149c('0xa5')]['n'][i] !== _0x306889['n'][i]) return !1;
  return _0x2a93fd[_0x149c('0xa5')]['n']['s'] === _0x306889['n']['s'] && _0x2a93fd['subjectPublicKeyRSA']['n']['t'] === _0x306889['n']['t'];
}
window[_0x149c('0x3')] || (window[_0x149c('0x3')] = {
  'log': function () {
  }
})
window[_0x149c('0x26')] = checkAPISupport;
